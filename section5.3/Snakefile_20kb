#!/usr/bin/env python

import os
import random
from tqdm import tqdm
import numpy as np
import json
import pyfastaq
import pandas as pd
import json
import glob
import statistics
import matplotlib.pyplot as plt

# Define the parameters
AMR_allele_file = "AMR_alleles_unified.fa"
output_dir = 'simulations_20kb_r10'
badread_length = "20000,20118"
seed = 2025  # Seed for reproducibility
# Set the seed for random and numpy
random.seed(seed)
np.random.seed(seed)

SAMPLES = [os.path.basename(f).replace(".fasta", "").replace(".fa", "") for f in glob.glob("AMR_contexts/*")]
DEPTHS = [5, 10, 20, 40, 80]

def aggregate_assems(wildcards):
    return expand(os.path.join("simulated_assemblies", "{sample}.fasta"), sample=SAMPLES)

def aggregate_flye(wildcards):
    return expand(os.path.join(output_dir, "AMRFP_flye" + "_{depth}", "{sample}", "AMR_finder_plus_results.tsv"), depth=DEPTHS, sample=SAMPLES)

def aggregate_amira(wildcards):
    return expand(os.path.join(output_dir, "amira" + "_{depth}", "{sample}"), depth=DEPTHS, sample=SAMPLES)

# Define the workflow
rule all:
    input:
        aggregate_assems,
        aggregate_flye,
        aggregate_amira

# Snakemake rule for simulating assemblies
rule simulate_assembly:
    input:
        reference_genome="reference_genome.fasta",
        reference_plasmid="reference_plasmid.fasta",
        context_fasta= lambda wildcards: os.path.join("AMR_contexts", wildcards.sample + ".fasta")
    output:
        os.path.join('simulated_assemblies', "{sample}.fasta")
    threads: 12
    params:
        allele_file=AMR_allele_file,
        seed=seed
    conda: "envs/simulate_assembly.yaml"
    shell:
        "python3 scripts/simulate_assemblies.py --seed {params.seed} --cores {threads} --context-fasta {input.context_fasta} --reference-genome {input.reference_genome} --reference-plasmid {input.reference_plasmid} --allele-file {params.allele_file} --output {output}"

rule simulate_r_10_reads:
    input:
        assembly=os.path.join("simulated_assemblies", "{sample}.fasta")
    output:
        os.path.join(output_dir, "reads" + "_{depth}", "{sample}_1.fastq")
    resources:
        mem_mb=30000, threads=1
    threads: 1
    params:
        sim_depth="{depth}",
        mean_length=badread_length,
        seed=seed
    shell:
        "badread simulate --seed {params.seed} --length {params.mean_length} --error_model nanopore2023 --qscore_model nanopore2023 --reference {input.assembly} --quantity {params.sim_depth}x > {output}"

rule compress_reads:
    input:
        readfile=os.path.join(output_dir, "reads" + "_{depth}", "{sample}_1.fastq")
    output:
        os.path.join(output_dir, "reads" + "_{depth}", "{sample}_1.fastq.gz")
    threads: 1
    resources:
        mem_mb=30000, threads=1
    shell:
        "gzip -1 -k {input.readfile}"

rule run_amira:
    input:
        readfile=os.path.join(output_dir, "reads" + "_{depth}", "{sample}_1.fastq.gz")
    output:
        directory(os.path.join(output_dir, "amira" + "_{depth}", "{sample}"))
    threads: 5
    resources:
        mem_mb=lambda wildcards, attempt: 50000 * attempt, threads=5, runtime=7200
    params:
        panRG="Escherichia.coli.panidx.zip",
        species="Escherichia_coli",
    shell:
        "singularity run amira.v0.11.0.img amira --debug --reads {input.readfile} --output {output} --species {params.species} --cores {threads} --panRG-path {params.panRG}"

rule flye_assemble:
    input:
        readfile=os.path.join(output_dir, "reads" + "_{depth}", "{sample}_1.fastq")
    output:
        directory(os.path.join(output_dir, "flye" + "_{depth}", "{sample}"))
    threads: 4
    resources:
        mem_mb=100000
    conda: "envs/flye.yaml"
    shell:
        "flye -g 5M -o {output} -t {threads} -i 2 --nano-raw {input.readfile}"

rule run_amrfp_on_flye:
    input:
        os.path.join(output_dir, "flye" + "_{depth}", "{sample}")
    output:
        outdir=directory(os.path.join(output_dir, "AMRFP_flye" + "_{depth}", "{sample}")),
        outfile=os.path.join(output_dir, "AMRFP_flye" + "_{depth}", "{sample}", "AMR_finder_plus_results.tsv")
    threads: 4
    resources:
        mem_mb=15000
    shell:
        "mkdir -p {output.outdir} && amrfinder -d 2024-07-22.1 -n {input}/assembly.fasta -o {output.outfile} -t {threads} --plus --organism Escherichia"
