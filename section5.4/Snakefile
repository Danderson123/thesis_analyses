import glob
import os

# specify the output directories
amira_output = "amira_output"
truth_gff_output = "truth_jsons"
stats_output = "truth_results"
copy_numbers_out = "mapped_nanopore_reads"
benchmark_dir = "benchmarks"
trimmed_reads = "trimmed_reads"
raven_dir = "raven_v1.8.3_nanopore_only_assemblies"
# make the directories
for d in [amira_output, truth_gff_output, stats_output, copy_numbers_out, benchmark_dir, trimmed_reads, raven_dir]:
    if not os.path.exists(d):
        os.mkdir(d)
# specify the sample to nanopore read mapping
mapping = {
    "GCA_027944575.1_ASM2794457v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044210_1.fastq.gz"},
    "GCA_027944595.1_ASM2794459v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044211_1.fastq.gz"},
    "GCA_027944615.1_ASM2794461v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044212_1.fastq.gz"},
    "GCA_027944635.1_ASM2794463v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044213_1.fastq.gz"},
    "GCA_027944655.1_ASM2794465v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044215_1.fastq.gz"},
    "GCA_027944675.1_ASM2794467v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044216_1.fastq.gz"},
    "GCA_027944695.1_ASM2794469v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044217_1.fastq.gz"},
    "GCA_027944715.1_ASM2794471v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044218_1.fastq.gz"},
    "GCA_027944735.1_ASM2794473v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044219_1.fastq.gz"},
    "GCA_027944775.1_ASM2794477v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044221_1.fastq.gz"},
    "GCA_027944795.1_ASM2794479v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044222_1.fastq.gz"},
    "GCA_027944815.1_ASM2794481v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044223_1.fastq.gz"},
    "GCA_027944835.1_ASM2794483v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044224_1.fastq.gz"},
    "GCA_027944855.1_ASM2794485v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044203_1.fastq.gz"},
    "GCA_027944875.1_ASM2794487v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044204_1.fastq.gz"},
    "GCA_027944895.1_ASM2794489v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044205_1.fastq.gz"},
    "GCA_027944915.1_ASM2794491v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044206_1.fastq.gz"},
    "GCA_027944935.1_ASM2794493v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044207_1.fastq.gz"},
    "GCA_027944955.1_ASM2794495v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044208_1.fastq.gz"},
    "GCA_027945015.1_ASM2794501v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044214_1.fastq.gz"},
    "GCA_027945035.1_ASM2794503v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044225_1.fastq.gz"},
    "GCA_027945055.1_ASM2794505v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044226_1.fastq.gz"},
    "GCA_028551585.1_ASM2855158v1_genomic":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR23044220_1.fastq.gz"},
    "AUSMDU00010405":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR32405434_1.fastq.gz"},
    "AUSMDU00015264":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR32405436_1.fastq.gz"},
    "AUSMDU00021208":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR32405439_1.fastq.gz"},
    "AUSMDU00031899":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR32405433_1.fastq.gz"},
    "AUSMDU00031978":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR32405440_1.fastq.gz"},
    "AUSMDU00032793":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR32405441_1.fastq.gz"},
    "AUSMDU00036400":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR32405435_1.fastq.gz"},
    "AUSMDU00040126":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR32405437_1.fastq.gz"},
    "AUSMDU00055259":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR32405442_1.fastq.gz"},
    "AUSMDU00062512":  {"ONT": "../amira_paper_data/truth_evaluation/subsampled_nanopore_reads/SRR32405438_1.fastq.gz"}
}

illumina_mapping = {
    "GCA_027944575.1_ASM2794457v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543847",
    "GCA_027944595.1_ASM2794459v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543854",
    "GCA_027944615.1_ASM2794461v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543861",
    "GCA_027944635.1_ASM2794463v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543882",
    "GCA_027944655.1_ASM2794465v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543883",
    "GCA_027944675.1_ASM2794467v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543887",
    "GCA_027944695.1_ASM2794469v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543892",
    "GCA_027944715.1_ASM2794471v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543930",
    "GCA_027944735.1_ASM2794473v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543931",
    "GCA_027944775.1_ASM2794477v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543936",
    "GCA_027944795.1_ASM2794479v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543941",
    "GCA_027944815.1_ASM2794481v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543945",
    "GCA_027944835.1_ASM2794483v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543947",
    "GCA_027944855.1_ASM2794485v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543948",
    "GCA_027944875.1_ASM2794487v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543793",
    "GCA_027944895.1_ASM2794489v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543798",
    "GCA_027944915.1_ASM2794491v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543803",
    "GCA_027944935.1_ASM2794493v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543900",
    "GCA_027944955.1_ASM2794495v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543904",
    "GCA_027945015.1_ASM2794501v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543922",
    "GCA_027945035.1_ASM2794503v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543827",
    "GCA_027945055.1_ASM2794505v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543837",
    "GCA_028551585.1_ASM2855158v1_genomic": "../amira_paper_data/truth_evaluation/illumina_reads/SRR22543934",
    "AUSMDU00010405": "../amira_paper_data/truth_evaluation/illumina_reads/SRR15116130",
    "AUSMDU00015264": "../amira_paper_data/truth_evaluation/illumina_reads/SRR14673594",
    "AUSMDU00021208": "../amira_paper_data/truth_evaluation/illumina_reads/SRR15116365",
    "AUSMDU00031899": "../amira_paper_data/truth_evaluation/illumina_reads/SRR15116275",
    "AUSMDU00031978": "../amira_paper_data/truth_evaluation/illumina_reads/SRR15116274",
    "AUSMDU00032793": "../amira_paper_data/truth_evaluation/illumina_reads/SRR15116259",
    "AUSMDU00036400": "../amira_paper_data/truth_evaluation/illumina_reads/SRR15116221",
    "AUSMDU00040126": "../amira_paper_data/truth_evaluation/illumina_reads/SRR15116179",
    "AUSMDU00055259": "../amira_paper_data/truth_evaluation/illumina_reads/SRR28786155",
    "AUSMDU00062512": "../amira_paper_data/truth_evaluation/illumina_reads/SRR32390598"
}

# Listing samples and appending assembly data
assemblies = glob.glob(os.path.join("../amira_paper_data/truth_evaluation/reference_assemblies", "*.fa")) + glob.glob(os.path.join("../amira_paper_data/truth_evaluation/reference_assemblies", "*.fasta"))
SAMPLES = [os.path.basename(a).replace(".fna", "").replace(".fasta", "").replace(".fa", "") for a in assemblies]
for sample in SAMPLES:
    mapping[sample]['assembly'] = next((a for a in assemblies if sample in a), None)

# Snakemake rules
rule all:
    input:
        os.path.join(stats_output, "figure_4a.png"),

rule run_amira:
    input:
        reads=lambda wildcards: mapping.get(wildcards.sample, {}).get('ONT', '0')
    output:
        sample_output=directory(os.path.join(amira_output, "{sample}"))
    threads: 4
    resources: mem_mb=30000
    params:
        panRG="Escherichia.coli.panidx.zip",
        species="Escherichia_coli"
    benchmark:
        os.path.join(benchmark_dir, "run_amira.{sample}.txt")
    shell:
        "singularity run amira.v0.11.0.img amira --reads {input.reads} --output {output.sample_output} --species {params.species} --cores {threads} --panRG-path {params.panRG}"

rule make_truth_json:
    input:
        assembly=lambda wildcards: mapping.get(wildcards.sample, {}).get('assembly', '0')
    output:
        sample_output=os.path.join(truth_gff_output, "{sample}.json")
    threads: 12
    resources:
        mem_mb=30000
    params:
        AMR_reference="AMR_alleles_unified.fa"
    benchmark:
        os.path.join(benchmark_dir, "make_truth_json.{sample}.txt")
    shell:
        """
        python3 software/make_truth_with_minimap.py \
        {input.assembly} {params.AMR_reference} {output.sample_output} {threads}
        """

rule unicycler_assemble:
    input:
        nanopore=lambda wildcards: mapping.get(wildcards.sample, {}).get('ONT', '0'),
        illumina_1=lambda wildcards: f"{illumina_mapping.get(wildcards.sample, '0')}_1.fastq.gz".replace(' ', ''),
        illumina_2=lambda wildcards: f"{illumina_mapping.get(wildcards.sample, '0')}_2.fastq.gz".replace(' ', ''),
    output:
        directory(os.path.join("unicycler_v0.5.0_hybrid_assemblies", "{sample}"))
    threads: 4
    resources:
        mem_mb=100000
    conda: "envs/unicycler.yaml"
    benchmark:
        os.path.join(benchmark_dir, "unicycler_assemble.{sample}.txt")
    shell:
        "unicycler -l {input.nanopore} -1 {input.illumina_1} -2 {input.illumina_2} -o {output} -t {threads} --keep 3"

rule flye_assemble:
    input:
        nanopore=lambda wildcards: mapping.get(wildcards.sample, {}).get('ONT', '0'),
    output:
        directory(os.path.join("flye_v2.9.3_nanopore_only_assemblies", "{sample}"))
    threads: 4
    resources:
        mem_mb=100000
    conda: "envs/flye.yaml"
    benchmark:
        os.path.join(benchmark_dir, "flye_assemble.{sample}.txt")
    shell:
        "flye -g 5M -o {output} -t {threads} --nano-raw {input}"

rule raven_assemble:
    input:
        nanopore=lambda wildcards: mapping.get(wildcards.sample, {}).get('ONT', '0'),
    output:
        os.path.join("raven_v1.8.3_nanopore_only_assemblies", "{sample}.fasta")
    threads: 4
    resources:
        mem_mb=100000
    conda: "envs/raven.yaml"
    benchmark:
        os.path.join(benchmark_dir, "raven_assemble.{sample}.txt")
    shell:
        "raven -t {threads} {input.nanopore} > {output}"

rule shovill_assemble:
    input:
        illumina_1=lambda wildcards: f"{illumina_mapping.get(wildcards.sample, '0')}_1.fastq.gz".replace(' ', ''),
        illumina_2=lambda wildcards: f"{illumina_mapping.get(wildcards.sample, '0')}_2.fastq.gz".replace(' ', ''),
    output:
        directory(os.path.join("shovill_v1.1.0_illumina_only_assemblies", "{sample}"))
    threads: 4
    resources:
        mem_mb=40000
    singularity: "docker://staphb/shovill:1.1.0-2022Dec"
    benchmark:
        os.path.join(benchmark_dir, "shovill_assemble.{sample}.txt")
    shell:
        "shovill --outdir {output} --R1 {input.illumina_1} --R2 {input.illumina_2} --cpus {threads}"

rule autocycler_assemble:
    input:
        nanopore=lambda wildcards: mapping.get(wildcards.sample, {}).get('ONT', '0'),
        illumina_1=lambda wildcards: f"{illumina_mapping.get(wildcards.sample, '0')}_1.fastq.gz".replace(' ', ''),
        illumina_2=lambda wildcards: f"{illumina_mapping.get(wildcards.sample, '0')}_2.fastq.gz".replace(' ', ''),
    output:
        directory(os.path.join("autocycler_v0.4.0_nanopore_only_assemblies", "{sample}"))
    threads: 4
    resources:
        mem_mb=100000
    conda: "envs/autocycler.yaml"
    benchmark:
        os.path.join(benchmark_dir, "autocycler_assemble.{sample}.txt")
    shell:
        'bash software/autoautocycler.sh -o {output} -t {threads} -a "canu flye miniasm nextdenovo" {input.nanopore}'

rule run_amrfp_on_autocycler:
    input:
        os.path.join("autocycler_v0.4.0_nanopore_only_assemblies", "{sample}")
    output:
        outdir=directory(os.path.join("AMR_finder_plus_results.autocycler_v0.4.0_nanopore_only_assemblies", "{sample}")),
        outfile=os.path.join("AMR_finder_plus_results.autocycler_v0.4.0_nanopore_only_assemblies", "{sample}", "AMR_finder_plus_results.tsv")
    threads: 4
    resources:
        mem_mb=15000
    params:
        amrfinder_db="2024-01-31.1"
    benchmark:
        os.path.join(benchmark_dir, "run_amrfp_on_autocycler.{sample}.txt")
    shell:
        "mkdir -p {output.outdir} && amrfinder -d {params.amrfinder_db} -n {input}/assembly.fasta -o {output.outfile} -t {threads} --plus --organism Escherichia"

rule run_amrfp_on_shovill:
    input:
        os.path.join("shovill_v1.1.0_illumina_only_assemblies", "{sample}")
    output:
        outdir=directory(os.path.join("AMR_finder_plus_results.shovill_v1.1.0_illumina_only_assemblies", "{sample}")),
        outfile=os.path.join("AMR_finder_plus_results.shovill_v1.1.0_illumina_only_assemblies", "{sample}", "AMR_finder_plus_results.tsv")
    threads: 4
    resources:
        mem_mb=15000
    params:
        amrfinder_db="2024-07-22.1"
    benchmark:
        os.path.join(benchmark_dir, "run_amrfp_on_shovill.{sample}.txt")
    shell:
        "mkdir -p {output.outdir} && amrfinder -d {params.amrfinder_db} -n {input}/contigs.fa -o {output.outfile} -t {threads} --plus --organism Escherichia"

rule run_amrfp_on_unicycler:
    input:
        os.path.join("unicycler_v0.5.0_hybrid_assemblies", "{sample}")
    output:
        outdir=directory(os.path.join("AMR_finder_plus_results.unicycler_v0.5.0_hybrid_assemblies", "{sample}")),
        outfile=os.path.join("AMR_finder_plus_results.unicycler_v0.5.0_hybrid_assemblies", "{sample}", "AMR_finder_plus_results.tsv")
    threads: 4
    resources:
        mem_mb=15000
    params:
        amrfinder_db="2024-07-22.1"
    benchmark:
        os.path.join(benchmark_dir, "run_amrfp_on_unicycler.{sample}.txt")
    shell:
        "mkdir -p {output.outdir} && amrfinder -d {params.amrfinder_db} -n {input}/assembly.fasta -o {output.outfile} -t {threads} --plus --organism Escherichia"

rule run_amrfp_on_flye:
    input:
        os.path.join("flye_v2.9.3_nanopore_only_assemblies", "{sample}")
    output:
        outdir=directory(os.path.join("AMR_finder_plus_results.flye_v2.9.3_nanopore_only_assemblies", "{sample}")),
        outfile=os.path.join("AMR_finder_plus_results.flye_v2.9.3_nanopore_only_assemblies", "{sample}", "AMR_finder_plus_results.tsv")
    threads: 4
    resources:
        mem_mb=15000
    params:
        amrfinder_db="2024-07-22.1"
    benchmark:
        os.path.join(benchmark_dir, "run_amrfp_on_flye.{sample}.txt")
    shell:
        "mkdir -p {output.outdir} && amrfinder -d {params.amrfinder_db} -n {input}/assembly.fasta -o {output.outfile} -t {threads} --plus --organism Escherichia"

rule run_amrfp_on_raven:
    input:
        os.path.join("raven_v1.8.3_nanopore_only_assemblies", "{sample}.fasta")
    output:
        outdir=directory(os.path.join("AMR_finder_plus_results.raven_v1.8.3_nanopore_only_assemblies", "{sample}")),
        outfile=os.path.join("AMR_finder_plus_results.raven_v1.8.3_nanopore_only_assemblies", "{sample}", "AMR_finder_plus_results.tsv")
    threads: 4
    resources:
        mem_mb=15000
    params:
        amrfinder_db="2024-07-22.1"
    benchmark:
        os.path.join(benchmark_dir, "run_amrfp_on_raven.{sample}.txt")
    shell:
        "mkdir -p {output.outdir} && amrfinder -d {params.amrfinder_db} -n {input} -o {output.outfile} -t {threads} --plus --organism Escherichia"

rule run_resfinder:
    input:
        reads=lambda wildcards: mapping.get(wildcards.sample, {}).get('ONT', '0')
    output:
        directory(os.path.join("resfinder_results", "{sample}"))
    threads: 1
    resources:
        mem_mb=15000
    benchmark:
        os.path.join(benchmark_dir, "run_resfinder.{sample}.txt")
    shell:
        "mkdir -p {output} && python3 -m resfinder -ifq {input.reads} -o {output} --nanopore -s e.coli -db_res software/db_ncbi -acq -k software/kma/kma"

def aggregate_truth_gffs(wildcards):
    return expand(os.path.join(truth_gff_output, "{sample}.json"), sample=SAMPLES)

def aggregate_amira(wildcards):
    return expand(os.path.join(amira_output, "{sample}"), sample=SAMPLES)

def aggregated_amrfp_flye(wildcards):
   return expand(os.path.join("AMR_finder_plus_results.flye_v2.9.3_nanopore_only_assemblies", "{sample}", "AMR_finder_plus_results.tsv"), sample=SAMPLES)

def aggregated_amrfp_unicycler(wildcards):
    return expand(os.path.join("AMR_finder_plus_results.unicycler_v0.5.0_hybrid_assemblies", "{sample}", "AMR_finder_plus_results.tsv"), sample=SAMPLES)

def aggregated_amrfp_shovill(wildcards):
    return expand(os.path.join("AMR_finder_plus_results.shovill_v1.1.0_illumina_only_assemblies", "{sample}", "AMR_finder_plus_results.tsv"), sample=SAMPLES)

def aggregated_amrfp_raven(wildcards):
    return expand(os.path.join("AMR_finder_plus_results.raven_v1.8.3_nanopore_only_assemblies", "{sample}", "AMR_finder_plus_results.tsv"), sample=SAMPLES)

def aggregated_resfinder(wildcards):
    return expand(os.path.join("resfinder_results", "{sample}"), sample=SAMPLES)

rule estimate_cellular_copy_numbers:
    input:
        assembly=lambda wildcards: mapping.get(wildcards.sample, {}).get('assembly', '0'),
        reads=lambda wildcards: mapping.get(wildcards.sample, {}).get('ONT', '0')
    output:
        os.path.join(copy_numbers_out, "{sample}.json")
    threads: 12
    resources:
        mem_mb=30000
    conda: "envs/cne.yaml"
    shell:
        "mkdir -p {copy_numbers_out} && python3 software/estimate_contig_copy_numbers.py {input.assembly} {input.reads} {copy_numbers_out} {threads}"

def aggregated_cns(wildcards):
    return expand(os.path.join(copy_numbers_out, "{sample}.json"), sample=SAMPLES)

rule get_allele_sequences:
    input:
        truth=aggregate_truth_gffs,
        cns=aggregated_cns
    output:
        directory("truth_allele_sequences")
    threads: 1
    resources:
        mem_mb=10000
    shell:
        "python3 software/get_amr_allele_true_nucleotide_sequences.py"

rule get_stats:
    input:
        truth=aggregate_truth_gffs,
        amira=aggregate_amira,
        flye=aggregated_amrfp_flye,
        raven=aggregated_amrfp_raven,
        unicycler=aggregated_amrfp_unicycler,
        resfinder=aggregated_resfinder,
        shovill=aggregated_amrfp_shovill,
        truth_alleles="truth_allele_sequences",
        cns=aggregated_cns
    output:
        os.path.join(stats_output, "figure_4a.png")
    threads: 1
    resources:
        mem_mb=10000
    params:
        AMR_reference="AMR_alleles_unified.fa"
    shell:
        "python3 software/make_truth_results.py"
