import glob
import os
import json
import sys
import statistics

NANOPORE_SAMPLES = [os.path.basename(f).split(".fastq.gz")[0] for f in glob.glob("nanopore_reads/*.fastq.gz") ]
output_dir = "evaluation_results"

if not os.path.exists(output_dir):
    os.mkdir(output_dir)

def aggregate_flye_nanopore(wildcards):
    return expand(os.path.join(output_dir, "AMR_finder_plus_results.flye_v2.9.3_nanopore_only_assemblies", "{nanopore_sample}"), nanopore_sample=NANOPORE_SAMPLES)

def aggregate_amira(wildcards):
    return expand(os.path.join(output_dir, "Amira_output.v0.9.3", "{nanopore_sample}"), nanopore_sample=NANOPORE_SAMPLES)

def aggregate_truth(wildcards):
    return expand(os.path.join(output_dir, "true_gene_content", "{nanopore_sample}"), nanopore_sample=NANOPORE_SAMPLES)

def aggregate_amira_validation(wildcards):
    return expand(os.path.join(output_dir, "amira_allele_coverages", "{nanopore_sample}"), nanopore_sample=NANOPORE_SAMPLES)

rule all:
    input:
        aggregate_flye_nanopore,
        aggregate_amira_validation

rule flye_assemble:
    input:
        reads=lambda wildcards: os.path.join("nanopore_reads", wildcards.nanopore_sample + ".fastq.gz")
    output:
        directory(os.path.join(output_dir, "flye_v2.9.3_nanopore_only_assemblies", "{nanopore_sample}"))
    threads: 4
    resources:
        mem_mb=60000,
        runtime=240
    conda: "envs/flye.yaml"
    shell:
        "flye -g 5M -o {output} -t {threads} --nano-raw {input}"

rule run_amrfp_on_flye:
    input:
        os.path.join(output_dir, "flye_v2.9.3_nanopore_only_assemblies", "{nanopore_sample}")
    output:
        outdir=directory(os.path.join(output_dir, "AMR_finder_plus_results.flye_v2.9.3_nanopore_only_assemblies", "{nanopore_sample}")),
        outfile=os.path.join(output_dir, "AMR_finder_plus_results.flye_v2.9.3_nanopore_only_assemblies", "{nanopore_sample}", "AMR_finder_plus_results.gff")
    threads: 4
    resources:
        mem_mb=15000
    shell:
        "mkdir -p {output.outdir} && amrfinder -d ../2024-07-22.1 -n {input}/assembly.fasta -o {output.outfile} -t {threads} --plus --organism Enterococcus_faecium"

rule run_amira:
    input:
        reads=lambda wildcards: os.path.join("nanopore_reads", wildcards.nanopore_sample + ".fastq.gz")
    output:
        sample_output=directory(os.path.join(output_dir, "Amira_output.v0.9.3", "{nanopore_sample}"))
    threads: 1
    resources:
        mem_mb=30000,
        runtime=240
    params:
        panRG="Enterococcus.faecium.panidx.zip",
        species="Enterococcus_faecium"
    shell:
        "singularity run ../amira.v0.9.3.img amira --reads {input.reads} --debug --output {output.sample_output} --species {params.species} --cores {threads} --panRG-path {params.panRG}"

rule get_true_gene_content:
    input:
        reads=lambda wildcards: os.path.join("nanopore_reads", wildcards.nanopore_sample + ".fastq.gz"),
        AMR_reference="AMR_alleles_unified.fa",
        core_genes="core_genes.fasta"
    output:
        sample_output=directory(os.path.join(output_dir, "true_gene_content", "{nanopore_sample}"))
    threads: 1
    resources: mem_mb=30000, threads=1, runtime=60
    conda: "envs/make_truth.yaml"
    shell:
        "mkdir -p {output.sample_output} && python3 scripts/get_true_AMR_genes.py --cores {threads} --reads {input.reads} --reference {input.AMR_reference} --output {output.sample_output} --core-genes {input.core_genes}"

rule check_amira_allele_coverages:
    input:
        reads=lambda wildcards: os.path.join("nanopore_reads", wildcards.nanopore_sample + ".fastq.gz"),
        amira_output=directory(os.path.join(output_dir, "Amira_output.v0.9.3", "{nanopore_sample}"))
    output:
        sample_output=directory(os.path.join(output_dir, "amira_allele_coverages", "{nanopore_sample}"))
    threads: 1
    resources: mem_mb=30000, threads=1, runtime=240
    conda: "envs/make_truth.yaml"
    shell:
        "mkdir -p {output.sample_output} && python3 scripts/verify_amira_calls.py --cores {threads} --reads {input.reads} --amira-output {input.amira_output} --output {output.sample_output}"
